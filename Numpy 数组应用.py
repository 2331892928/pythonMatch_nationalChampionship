"""
任务详情
按照下面要求构建一个 Ndarray 对象，并完成任务要求。

生成一个有 m * m 个元素的 ndarray 一维数组，元素全部填充成 1；

将数组中索引是素数的元素设置成该素数，如索引 3 是素数，需要将该位置的值需要修改成 3。如列表如下 [1.0, 1.0, 1.0, 1.0]，其中索引 2 和 索引 3 是素数，需要修改，修改后的元组如下 [1.0, 1.0, 2.0, 3.0]；

将数组转换为 m * m 的二维数组；

反转二维数组第 n 列的元素。 如二维数组包含元素如下：[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]，反转第三列的元素后，列表变为 [[1.0, 2.0, 6.0], [4.0, 5.0, 3.0]]；

将二维数组转换为一维数组；

将数组转换为一维数组，再并转换为列表，返回给判定程序。

任务要求
程序接收两个变量 m 和 n，两个元素的数据类型均是 int 类型；

程序需要返回的数据类型是 list，列表中的元素数据类型是 float 或 float64；

返回前需将类型转换为 list 数据类型，否则将导致结果不正确。

测试用例
输入：m = 3, n = 2
输出：[1.0, 7.0, 2.0, 3.0, 1.0, 5.0, 1.0, 1.0, 1.0]
解释：

第一步，生成元素是 1 的一维数组，数组长度是 3 * 3 = 9。数组：[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]；

第二步，将数组中索引是素数的元素设置成该素数。修改后的数组：[1.0, 1.0, 2.0, 3.0, 1.0, 5.0, 1.0, 7.0, 1.0]；

第三步，转换二维数组。修改后的数组如下：

[
 [1.0, 1.0, 2.0],
 [3.0, 1.0, 5.0],
 [1.0, 7.0, 1.0]
]
第四步，反转二维数组第 2 列的元素。反转后的数组如下：

[
 [1.0, 7.0, 2.0],
 [3.0, 1.0, 5.0],
 [1.0, 1.0, 1.0]
]
第五步，将数组扁平化，并转换成列表，结果如下：[1.0, 7.0, 2.0, 3.0, 1.0, 5.0, 1.0, 1.0, 1.0]

输入：m = 4， n = 2
输出：[1.0, 13.0, 2.0, 3.0, 1.0, 1.0, 1.0, 7.0, 1.0, 5.0, 1.0, 11.0, 1.0, 1.0, 1.0, 1.0]

函数提示
反转数组 | flipud

>>> import numpy as np
>>> dt = np.array([1, 2, 3, 4])
>>> np.flipud(dt)
array([4, 3, 2, 1])
扁平数组 | flatten

>>> import numpy as np
>>> dt = np.array([[1, 2, 3], [4, 5, 6]])
>>> dt.flatten()
array([1, 2, 3, 4, 5, 6])
不会
"""
# -*- coding: utf-8 -*-
# 1. 运行或提交代码不需要自己编写测试用例，后台自动进行测试检查。
# 2. 您编写代码的区域需要限制在Solution类或其他类和函数体内，保证输入与输出符合任务要求即可。
# 3. 点击“提交代码”按钮，系统将查看程序是否正确，并保存代码，记录任务数据。
# 4. 提交代码次数越多，任务得分越低。
# 5. 点击右上方“结束任务”按钮，系统将在后台计算任务得分，任务结束。
import numpy as np


class Solution:

    def numpy_exer(self, m: int, n: int) -> list:
        pass


S = Solution()
S.numpy_exer(3, 2)
